# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Debug build'
        required: false
        default: 'n'
  #push:
  #  branches:
  #    - master
  schedule:
    - cron: 0 2 1-31/3 * *
  watch:
    types: started

permissions:
  contents: read

env:
  SSH_ACTIONS: false

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-22.04

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          remove-android:       'true'
          remove-dotnet:        'true'
          remove-haskell:       'true'
          remove-codeql:        'true'
          remove-docker-images: 'true'

      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler fastjar flex gawk gettext genisoimage gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-pyelftools python3-setuptools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          df -h
      - name: Checkout OpenWrt
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: cache
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'

      - name: Own package
        run: |
          cd package
          mkdir openwrt-packages
          cd openwrt-packages
          # git clone https://github.com/tindy2013/openwrt-subconverter.git
          # git clone -b 18.06 https://github.com/garypang13/luci-theme-edge.git
          git clone --branch master https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic.git
          # git clone -b master https://github.com/vernesong/OpenClash.git
          # mkdir luci-app-openclash
          # cd luci-app-openclash
          # git init
          # git remote add -f origin https://github.com/vernesong/OpenClash.git
          # git config core.sparsecheckout true
          # echo "luci-app-openclash" >> .git/info/sparse-checkout
          # git pull --depth 1 origin master
          # git branch --set-upstream-to=origin/master master
          # cd ..
          git clone --filter=blob:none https://github.com/vernesong/OpenClash
          git clone https://github.com/ZeaKyX/luci-app-poweroff.git
          git clone https://github.com/ZeaKyX/speedtest-web.git
          git clone https://github.com/ZeaKyX/luci-app-speedtest-web.git
          git clone https://github.com/ZeaKyX/hklight.git
          cd ..
          cd lean
          # rm -rf luci-theme-argon
          git clone https://github.com/jerrykuku/luci-theme-argon.git
          # git clone https://github.com/gngpp/luci-theme-design.git
          # git clone https://github.com/jerrykuku/node-request.git
          # git clone https://github.com/jerrykuku/luci-app-jd-dailybonus.git
          # git clone -b dev_msmtp https://github.com/ZeaKyX/luci-app-wechatpush.git
          git clone https://github.com/tty228/luci-app-wechatpush.git
      - name: Update feeds
        run: |
          #grep -q 'helloworld' feeds.conf.default && sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default || echo 'src-git helloworld https://github.com/fw876/helloworld' >> feeds.conf.default
          sed -i "/helloworld/d" "feeds.conf.default"
          echo "src-git helloworld https://github.com/fw876/helloworld.git" >> "feeds.conf.default"
          echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages.git;main" >> "feeds.conf.default"
          echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall.git;main" >> "feeds.conf.default"
          #sed -i '$a src-git diy https://github.com/firker/diy-ziyong' feeds.conf.default
          #svn co https://github.com/firker/diy-ziyong/trunk/luci-app-koolproxyR package/openwrt-packages/luci-app-koolproxyR
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          sed -i 's#/bin/login#/usr/libexec/login.sh#g' ./feeds/packages/utils/ttyd/files/ttyd.config
          cd feeds/luci/themes
          rm -rf luci-theme-argon
          rm -rf luci-theme-design
      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config
          #
          # ========================固件定制部分========================
          # 
          # 
          # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
          # 
          # 以下为定制化固件选项和说明:
          #
          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          # 
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          #
          # 
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          # 
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          # 
          # 使用缓存编译:
          cat >> .config <<EOF
          CONFIG_DEVEL=y
          CONFIG_CCACHE=y
          EOF
          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          CONFIG_TARGET_ROOTFS_EXT4FS=y
          CONFIG_TARGET_ROOTFS_PARTSIZE=1000
          EOF
          # 固件压缩:
          # cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_GZIP=y
          # EOF
          # 编译UEFI固件:
          # cat >> .config <<EOF
          # CONFIG_EFI_IMAGES=y
          # EOF
          # IPv6支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          # CONFIG_PACKAGE_ipv6helper=y
          # EOF
          # 多文件系统支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-fs-nfs=y
          # CONFIG_PACKAGE_kmod-fs-nfs-common=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          # CONFIG_PACKAGE_kmod-fs-ntfs=y
          # CONFIG_PACKAGE_kmod-fs-squashfs=y
          # EOF
          # USB3.0支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-usb-ohci=y
          # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          # CONFIG_PACKAGE_kmod-usb2=y
          # CONFIG_PACKAGE_kmod-usb2-pci=y
          # CONFIG_PACKAGE_kmod-usb3=y
          # EOF
          # 常用LuCI插件选择:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-baidupcs-web=y
          CONFIG_PACKAGE_luci-app-frpc=y
          CONFIG_PACKAGE_luci-app-frps=y
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-webadmin=y
          CONFIG_PACKAGE_luci-app-wrtbwmon=y
          CONFIG_PACKAGE_luci-app-serverchan=y
          CONFIG_PACKAGE_luci-app-wechatpush=y
          CONFIG_PACKAGE_luci-app-pushbot=y
          CONFIG_PACKAGE_luci-app-jd-dailybonus=y
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-poweroff=m
          CONFIG_PACKAGE_luci-app-advanced-reboot=y
          CONFIG_PACKAGE_luci-app-unblockneteasemusic=y
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_luci-app-adbyby-plus=y
          CONFIG_PACKAGE_luci-app-ipsec-vpnd=y
          CONFIG_PACKAGE_luci-proto-bonding=y
          CONFIG_PACKAGE_luci-app-diskman=y
          CONFIG_PACKAGE_luci-app-unblockmusic=y
          CONFIG_PACKAGE_luci-app-zerotier=y
          CONFIG_PACKAGE_luci-app-wireguard=y
          EOF
          #CONFIG_PACKAGE_luci-app-koolproxyR=y
          # LuCI主题:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-theme-edge=y
          CONFIG_PACKAGE_luci-theme-design=y
          EOF
          # 常用软件包:
          cat >> .config <<EOF
          CONFIG_PACKAGE_adb=y
          CONFIG_PACKAGE_msmtp=y
          CONFIG_PACKAGE_openssh-client=y
          CONFIG_PACKAGE_openssh-keygen=y
          CONFIG_PACKAGE_luci-mod-rpc=y
          CONFIG_PACKAGE_ddns-scripts_aliyun=y
          CONFIG_PACKAGE_ddns-scripts_dnspod=y
          EOF
          #CONFIG_PACKAGE_subconverter=y
          #CONFIG_PACKAGE_rapidjson=y
          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_PAD is not set
          # CONFIG_VMDK_IMAGES is not set
          EOF
          # 
          # ========================固件定制部分结束========================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
          echo "======================="
          echo "Pre-download Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -ah --max-depth=1 ./
          du -ah --max-depth=1 ./package
          du -ah --max-depth=1 ./package/openwrt-packages
          du -ah --max-depth=1 ./package/lean
      - name: SSH connection to Actions
        env:
          #SCKEY: ${{secrets.SCKEY}}
          SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
        uses: ZeaKyX/debugger-action@master
        if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh') || github.event_name != 'schedule' && github.event.inputs.debug == 'n'

      - name: Download packages
        run: |
          make download -j16
          echo "======================="
          echo "Pre-compile Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -ah --max-depth=1 ./
          du -ah --max-depth=1 ./package
          du -ah --max-depth=1 ./package/openwrt-packages
          du -ah --max-depth=1 ./package/lean
      - name: Compile firmware
        if: github.event.inputs.debug != 'y'
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -ah --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -ah --max-depth=1 ./build_dir
          du -ah --max-depth=1 ./bin
      - name: Compile debug
        if: github.event.inputs.debug == 'y'
        run: |
          # rm -f ./.config*
          # echo CONFIG_TARGET_x86_64_Generic=y > .config
          # make defconfig
          echo "======================="
          echo "Pre-compile Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -ah --max-depth=1 ./          
          make -j$(nproc)
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -ah --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -ah --max-depth=1 ./build_dir
          du -ah --max-depth=1 ./bin
      - name: SSH debug
        env:
          #SCKEY: ${{secrets.SCKEY}}
          SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
        uses: ZeaKyX/debugger-action@master
        if: github.event.inputs.debug == 'y'

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload config
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_config
          include-hidden-files: true
          path: ./.config

      #- name: Upload release asset
      #  if: github.event == 'release'
      #  uses: svenstaro/upload-release-action@v2
      #  with:
      #    repo_token: ${{ secrets.YOURTOKEN }}
      #    file: ./artifact/firmware/*
      #    tag: ${{ github.ref }}
      #    file_glob: true

      # - name: 定时编译通知
      #   env:
      #     SCKEY: ${{secrets.SCKEY}}
      #   if: github.event_name == 'schedule'
      #   run: |
      #     send_title="x86定时云编译完成"
      #     send_content="x86定时云编译完成。"
      #     markdown_splitline="%0D%0A%0D%0A---%0D%0A%0D%0A"
      #     curl -s "http://sc.ftqq.com/${SCKEY}.send?text=${send_title}" -d "&desp=${markdown_splitline}${send_content}"
      # - name: 手动编译通知
      #   env:
      #     SCKEY: ${{secrets.SCKEY}}
      #   if: github.event_name != 'schedule'
      #   run: |
      #     send_title="x86手动云编译完成"
      #     send_content="x86手动云编译完成。"
      #     markdown_splitline="%0D%0A%0D%0A---%0D%0A%0D%0A"
      #     curl -s "http://sc.ftqq.com/${SCKEY}.send?text=${send_title}" -d "&desp=${markdown_splitline}${send_content}"
